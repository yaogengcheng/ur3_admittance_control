<?xml version="1.0" ?>
<launch>
  <arg name="sim" default="false" />
  <arg name="use_sim_time" default="true" />
  <arg name="F/T_sensor" default="true"/>
  <arg name="paused" default="true" />
  <arg name="headless" default="false" />
  <arg name="world_name" default="$(find ur5_bringup)/worlds/empty.world" />

  <!-- **************************REAL ROBOT***************************** -->
  <group unless="$(arg sim)">

    <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" 
      args="0 0 0 0 0 0 1 world base_link 7" />

    <!-- F/T sensor -->
    <!-- ********REAL WRENCH from F/T sensor********************** -->
    <!-- <include if="$(arg F/T_sensor)" file="$(find ati_sensor)/launch/ft_sensor.launch"/> -->
    <!-- ********REAL WRENCH from F/T sensor********************** -->

    <!-- FT sensor -->
    <!-- 注意/admittance_control/wrench下面的数据格式是/admittance_control/wrench/wrench/force or torque -->
    <!-- <node name="ft_sensor_node" pkg="ati_sensor" 
      type="ft_sensor_node" respawn="true" output="screen" >
    </node> -->

    <!-- Bias the F/T sensor at startup -->
    
  <arg name="min_payload"  default="0.0"/>
  <arg name="max_payload"  default="3.0"/>
  <arg name="prefix" default="" />
  <arg name="max_velocity" default="10.0"/> <!-- [rad/s] -->
  <arg name="base_frame" default="$(arg prefix)base" />
  <arg name="tool_frame" default="$(arg prefix)tool0_controller" />

  <node name="rviz" pkg="rviz" type="rviz" >
    </node>
  
  <node name="FT_300_sensor" pkg="robotiq_ft_sensor" type="rq_sensor" ></node>

  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find ur5_bringup)/urdf/ur3_robot.urdf.xacro'" />

    <!-- Hardware interface for rso control-->
      <node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver"
          output="screen" >
        <param name="robot_ip_address" type="str" value="192.168.1.2"/>
        <param name="min_payload" type="double" value="$(arg min_payload)"/>
        <param name="max_payload" type="double" value="$(arg max_payload)"/>
        <param name="max_velocity" type="double" value="$(arg max_velocity)"/>
        <param name="use_ros_control" type="bool" value="True"/>
        <param name="servoj_gain" type="double" value="2000" />
        <param name="prefix" value="$(arg prefix)" />
        <param name="base_frame" type="str" value="$(arg base_frame)"/>
        <param name="tool_frame" type="str" value="$(arg tool_frame)"/>
      </node>

        <!-- Convert joint states to /tf tranforms -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
          <rosparam param="publish_frequency">200</rosparam>
        </node>

    <!-- ROS control controllers -->
    <!-- joint_state_controller (to publish states, an observer) -->
    <rosparam file="$(find ur5_bringup)/controllers/joint_state_controller.yaml" command="load"/>
    <node name="joint_state_controller_spawner" pkg="controller_manager"
      type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>

    <!-- arm controller (to send commands to the arm) Uses the simulated velocity control
      interface to gazebo -->
    <rosparam file="$(find ur5_bringup)/controllers/ur5_vel_controller.yaml" command="load"/>
    <node name="arm_controller_spawner" pkg="controller_manager"
        type="controller_manager" args="spawn arm_controller"
        respawn="false" output="screen"/>
   <!-- <node name="arm_controller_stopped" pkg="controller_manager"
      type="controller_manager" args="load my_cartesian_force_controller"
      respawn="false" output="screen"/> -->
    <include file="$(find ur5_admittance_control)/launch/ur_move_group.launch">
    </include> 
  </group>
  <!-- **************************REAL ROBOT***************************** -->


  <!--************************** SIMULATOR ******************************-->
  <group if="$(arg sim)">
    <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" 
      args="0 0 0 0 0 0 1 world base_link 7" />

    <!-- Launch Gazebo with the specified world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="paused" value="$(arg paused)" />
      <arg name="debug" value="0" />
      <arg name="gui" value="true" />
      <arg name="use_sim_time" value="$(arg use_sim_time)" />
      <arg name="headless" value="$(arg headless)" />
      <arg name="world_name" value="worlds/empty.world" />
    </include>

    <!-- FULL ROBOT DESCRIPTION -->
    <!-- For the real robot it launches at startup so we don't need to load it again --> 
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find ur5_bringup)/urdf/ur3_robot.urdf.xacro'" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

   <!-- Fake Calibration for the UR5 arm -->
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />

    <!-- SPAWN FULL ROBOT -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -model ur3 -param robot_description -x 0 -y 0 -z 0" />

    <!-- UR5 ARM CONTROLLERS -->
    <!-- joint_state_controller (to publish states, an observer) -->
    <rosparam file="$(find ur5_bringup)/controllers/joint_state_controller.yaml" command="load"/>
    <node name="joint_state_controller_spawner" pkg="controller_manager"
      type="controller_manager" args="load joint_state_controller" respawn="false" output="screen"/>

    <!-- arm controller (to send commands to the arm) Uses the simulated velocity control
      interface to gazebo -->
    <rosparam file="$(find ur5_bringup)/controllers/ur5_vel_controller.yaml" command="load"/>
    <!-- <node name="arm_controller_stopped" pkg="controller_manager"
      type="controller_manager" args="load my_cartesian_force_controller"
      respawn="false" output="screen"/> -->
    <node name="arm_controller_spawner" pkg="controller_manager"
      type="controller_manager" args="load arm_controller"
      respawn="false" output="screen"/>


  <include file="$(find ur5_admittance_control)/launch/ur_move_group.launch">
  </include> 
   <!-- <include file="$(find ur3_FT300_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="false"/>
    </include> -->

  </group>
  <!--************************** SIMULATOR ******************************-->
  
</launch>

